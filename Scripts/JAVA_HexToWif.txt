import java.security.*;
import java.math.BigInteger;

//Wikipedia reference: https://en.bitcoin.it/wiki/Wallet_import_format

public class HextoWIF {

    public static void main(String[] args) throws NoSuchAlgorithmException {	
    	
    	//Example provided: 0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D
    	//Example decode: 5HueCGU8rMjxEXxiPuD5BDku4MkFqeZyd4dZ1jvhTVqvbTLvyTJ
    	//My string: 5bb5e58f39f58529ad0516627d45efa741daeb480688dfd3ecf5288091ac24d9
    	//My decode: 5JWgCnZ3CWzHD84hzq3KPRzjqtWRz7fJrVHsjv4s9QCbTyVwSUB (IT WORKS)
        String Step1 = "15D4B9DBC48302F65DC3E055557B5BBF7DB832F43097FC6E648F5E1BE66C63D5";
        String Step2 = "80" + Step1;
        byte[] data = hexStringToByteArray(Step2);
        byte[] Step3 = MessageDigest.getInstance("SHA-256").digest(data);
        byte[] Step4 = MessageDigest.getInstance("SHA-256").digest(Step3);
        String HexStep4 = bytesToHex(Step4);
        String Step5 = getLeftString(HexStep4,8);
        String Step6 = Step2 + Step5;
        byte[] byteStep7 = hexStringToByteArray(Step6);
        String Step7 = encode(byteStep7);
        
        
        //System.out.println(Step1);
        //System.out.println(Step2);
        //System.out.println(Step3);
        //System.out.println(Step4);
        //System.out.println(HexStep4);
        //System.out.println(Step5);
        //System.out.println(Step6);
        System.out.println(Step7);
        
    }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte b : bytes) result.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
        return result.toString();
    }
    
    public static String getRightString(String Input,int OutputLen){
        int stringlength=Input.length();

        if(stringlength<=OutputLen){
            return Input;
        }

        return Input.substring((stringlength-OutputLen));
    }
    
    public static String getLeftString(String Input,int Output){
        int stringlength=Input.length();

        if(stringlength<=Output){
            return Input;
        }

        return Input.substring(0,Output);
    }
    
    
    private static final String ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"; 
    private static final BigInteger BASE = BigInteger.valueOf(58); 
    
    
    public static String encode(byte[] input)  
    { 
        // This could be a lot more efficient. 
        BigInteger bi = new BigInteger(1, input); 
        StringBuffer s = new StringBuffer(); 
        while (bi.compareTo(BASE) >= 0)  
        { 
            BigInteger mod = bi.mod(BASE); 
            s.insert(0, ALPHABET.charAt(mod.intValue())); 
            bi = bi.subtract(mod).divide(BASE); 
        } 
        s.insert(0, ALPHABET.charAt(bi.intValue())); 
        // Convert leading zeros too. 
        for (byte anInput : input)  
        { 
            if (anInput == 0) 
                s.insert(0, ALPHABET.charAt(0)); 
            else 
                break; 
        } 
        return s.toString(); 
    } 
 
    public static byte[] decode(String input) 
    { 
        byte[] bytes = decodeToBigInteger(input).toByteArray(); 
        // We may have got one more byte than we wanted, if the high bit of the next-to-last byte was not zero. This 
        // is because BigIntegers are represented with twos-compliment notation, thus if the high bit of the last 
        // byte happens to be 1 another 8 zero bits will be added to ensure the number parses as positive. Detect 
        // that case here and chop it off. 
        boolean stripSignByte = bytes.length > 1 && bytes[0] == 0 && bytes[1] < 0; 
        // Count the leading zeros, if any. 
        int leadingZeros = 0; 
        for (int i = 0; input.charAt(i) == ALPHABET.charAt(0); i++)  
        { 
            leadingZeros++; 
        } 
        // Now cut/pad correctly. Java 6 has a convenience for this, but Android can't use it. 
        byte[] tmp = new byte[bytes.length - (stripSignByte ? 1 : 0) + leadingZeros]; 
        System.arraycopy(bytes, stripSignByte ? 1 : 0, tmp, leadingZeros, tmp.length - leadingZeros); 
        return tmp; 
    } 
 
    protected static BigInteger decodeToBigInteger(String input) 
    { 
     BigInteger bi = BigInteger.valueOf(0); 
         
        // Work backwards through the string. 
        for (int i = input.length() - 1; i >= 0; i--) 
        { 
            int alphaIndex = ALPHABET.indexOf(input.charAt(i)); 
            if (alphaIndex == -1) 
            { 
             throw new IllegalArgumentException("In Base58.decodeToBigInteger(), Illegal character " + input.charAt(i) + " at index " + i + ". Throwing new IlleglArgumentException."); 
            } 
            bi = bi.add(BigInteger.valueOf(alphaIndex).multiply(BASE.pow(input.length() - 1 - i))); 
        } 
         
        return bi; 
    }
}